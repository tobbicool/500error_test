---
import Trans from "./Trans.astro";
import { i18n } from "../i18n";

function getLocalizedPath(key: string) {
    const currentLang = i18n.language;
    const basePath = i18n.t(key);

    // Ensure basePath does not start with a slash to prevent double slashes
    const normalizedBasePath = basePath.startsWith("/")
        ? basePath.slice(1)
        : basePath;

    return `/${currentLang === "en" ? "" : currentLang + "/"}${normalizedBasePath}`;
}
---

<div id="cookie-consent-modal" class="modal">
    <div class="modal-content">
        <div class="modal-content__description-wrapper">
            <h2 class="modal-content__header">
                <Trans key="cookie-consent:title" />
            </h2>
            <p class="modal-content__description">
                <Trans key="cookie-consent:description" />
                <a href={getLocalizedPath("links:url-privacy-policy")}>
                    <Trans key="cookie-consent:readMore" />
                </a>
            </p>
            <div id="preferences" class="cookie-consent__hidden">
                <div class="modal-content__preference">
                    <div class="modal-content__toggle-description">
                        <h3>
                            <Trans key="cookie-consent:saveCharacters" />
                        </h3>
                        <p>
                            <Trans
                                key="cookie-consent:saveCharactersDescription"
                            />
                        </p>
                    </div>
                    <label>
                        <input type="checkbox" id="save-characters" checked />
                        <span class="toggle"></span>
                    </label>
                </div>
                <div class="modal-content__preference">
                    <div class="modal-content__toggle-description">
                        <h3>
                            <Trans key="cookie-consent:googleAnalytics" />
                        </h3>
                        <p>
                            <Trans
                                key="cookie-consent:googleAnalyticsDescription"
                            />
                        </p>
                    </div>
                    <label>
                        <input type="checkbox" id="google-analytics" checked />
                        <span class="toggle"></span>
                    </label>
                </div>
            </div>
        </div>

        <div id="initial-buttons" class="modal-content__buttons">
            <button id="manage-preferences">
                <Trans key="cookie-consent:managePreferences" />
            </button>
            <button id="accept-all">
                <Trans key="cookie-consent:acceptAll" />
            </button>
        </div>

        <div id="additional-buttons" class="modal-content__buttons cookie-consent__hidden">
            <button id="reject-all">
                <Trans key="cookie-consent:rejectAll" />
            </button>
            <button id="save-preferences">
                <Trans key="cookie-consent:savePreferences" />
            </button>
        </div>
    </div>
</div>

<style lang="scss">
    @import "/src/styles/mixins";

    .modal {
        display: none;
        justify-content: center;
        align-items: center;
        position: fixed;
        z-index: 1900;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
        background-color: var(--contrast-clr-1);
        width: 80%;
        max-width: 500px;
        max-height: 80vh;
        border-radius: 1rem;
        font-size: var(--fs-large);
        overflow-y: auto;
        position: relative;

        &__description-wrapper {
            overflow-y: auto;
            padding: 1.4rem 1.4rem 0 1.4rem;

            &.cookie-consent-shadow {
                padding: 1.4rem;
            }
        }

        &__description {
            margin-top: 0.5rem;

            a {
                color: var(--accent-clr-2);
            }
        }

        .cookie-consent__hidden {
            display: none;
        }

        &__buttons {
            position: sticky;
            bottom: 0;
            background-color: var(--contrast-clr-1);
            padding: 1.4rem;
        }

        button {
            margin: 0.3rem;
            padding: 0.7rem 1rem;
            cursor: pointer;
            border-radius: 0.5rem;
            border: none;
            background-color: var(--accent-clr-1);
            color: var(--contrast-clr-1);
            font-size: var(--fs-medium);

            &:hover {
                background-color: var(--accent-clr-1-hover);
            }
        }

        #additional-buttons {
            transition: box-shadow 0.3s ease;
        }

        #additional-buttons.cookie-consent-shadow {
            box-shadow: 0px 0px 10px 0px hsla(0, 0%, 0%, 0.192);
        }

        #manage-preferences {
            color: var(--accent-clr-1);
            background-color: transparent;
        }

        &__preference {
            margin-top: 1.4rem;
            display: flex;
            align-items: center;
            gap: 0.7rem;
        }

        &__toggle-description {
            h3 {
                font-size: var(--fs-large);
            }

            p {
                font-size: var(--fs-medium);
            }
        }

        .toggle {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
            background-color: #ccc;
            border-radius: 34px;
            transition: 0.1s;
            cursor: pointer;
        }

        .toggle:before {
            content: "";
            position: absolute;
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: 0.1s;
            border-radius: 50%;
        }

        input[type="checkbox"] {
            display: none;
        }

        input[type="checkbox"]:checked + .toggle {
            background-color: var(--accent-clr-2);
        }

        input[type="checkbox"]:checked + .toggle:before {
            transform: translateX(26px);
        }
    }

    @media screen and (max-width: 440px) {
        .modal-content {
            font-size: var(--fs-medium);

            &__toggle-description {
                h3 {
                    font-size: var(--fs-large);
                }

                p {
                    font-size: var(--fs-medium);
                }
            }
        }
    }
</style>

<script is:inline>
    const modal = document.getElementById("cookie-consent-modal");
    const managePreferences = document.getElementById("manage-preferences");
    const acceptAll = document.getElementById("accept-all");
    const rejectAll = document.getElementById("reject-all");
    const savePreferences = document.getElementById("save-preferences");
    const preferences = document.getElementById("preferences");
    const additionalButtons = document.getElementById("additional-buttons");
    const initialButtons = document.getElementById("initial-buttons");
    const saveCharacter = document.getElementById("save-characters");
    const googleAnalytics = document.getElementById("google-analytics");
    const modalContent = document.querySelector(".modal-content");

    function showPreferences() {
        // The reason for the long name is that this script will be available for the entire page, so to avoid any accidental mixing of 'hidden', it has a long name.
        preferences.classList.remove("cookie-consent__hidden");
        additionalButtons.classList.remove("cookie-consent__hidden");
        initialButtons.classList.add("cookie-consent__hidden");
        updateButtonShadow();
    }

    function updateButtonShadow() {
        if (modalContent.scrollHeight > modalContent.clientHeight) {
            const isScrolledToBottom = modalContent.scrollHeight - modalContent.scrollTop === modalContent.clientHeight;
            additionalButtons.classList.toggle('cookie-consent-shadow', !isScrolledToBottom);
        } else {
            additionalButtons.classList.remove('cookie-consent-shadow');
        }
    }

    modalContent.addEventListener('scroll', updateButtonShadow);
    window.addEventListener('resize', updateButtonShadow);

    function saveConsent(saveChar, analytics) {
        localStorage.setItem("consentSaveCharacters", saveChar);
        localStorage.setItem("consentGoogleAnalytics", analytics);
        localStorage.setItem("consentGiven", "true");

        if (!saveChar) {
            // Clear all character progress from localStorage
            Object.keys(localStorage).forEach((key) => {
                if (
                    key !== "consentSaveCharacters" &&
                    key !== "consentGoogleAnalytics" &&
                    key !== "consentGiven"
                ) {
                    localStorage.removeItem(key);
                }
            });
        }

        if (analytics) {
            // Initialize Google Analytics
            initializeGoogleAnalytics();
        } else {
            // Disable Google Analytics
            window["ga-disable-G-SOMETHING"] = true;
        }

        closeModal();
    }

    function closeModal() {
        modal.style.display = "none";
    }

    function initializeGoogleAnalytics() {
        // Initialize Google Analytics
        window.dataLayer = window.dataLayer || [];
        function gtag() {
            dataLayer.push(arguments);
        }
        gtag("js", new Date());
        gtag("config", "G-SOMETHING");

        // Load Google Analytics script
        const script = document.createElement("script");
        script.async = true;
        script.src = "https://www.googletagmanager.com/gtag/js?id=G-SOMETHING";
        document.head.appendChild(script);
    }

    managePreferences.addEventListener("click", showPreferences);
    acceptAll.addEventListener("click", () => saveConsent(true, true));
    rejectAll.addEventListener("click", () => saveConsent(false, false));
    savePreferences.addEventListener("click", () => {
        saveConsent(saveCharacter.checked, googleAnalytics.checked);
    });

    function isFirstVisit() {
        return !localStorage.getItem("consentGiven");
    }

    if (isFirstVisit()) {
        modal.style.display = "flex";
        setTimeout(updateButtonShadow, 0);
    } else {
        const saveChar =
            localStorage.getItem("consentSaveCharacters") === "true";
        const analytics =
            localStorage.getItem("consentGoogleAnalytics") === "true";
        saveConsent(saveChar, analytics);
    }
</script>
